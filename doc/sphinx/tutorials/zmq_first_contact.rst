.. _zeromq_first_contact:

=============
First contact
=============

Noe that we have a Redis server running and we have compiled PaGMO and PyGMO with ZeroMQ support (see :ref:`zeromq_setup`), we can run an example program that leverages the functionality of this type of island. 

.. code-block:: python
    :linenos:

    from PyGMO import *
    import time

    prob = problem.schwefel(10)
    algo = algorithm.de(10)
    pop = population(prob, 20)

    isl = zmq_island(algo, pop)
    isl.set_broker_details("127.0.0.1", 6379)
    isl.set_token("schwefel10_de10_pop20")
    isl.set_ip("127.0.0.1")
    isl.connect()

    while True:
        isl.evolve(10)
        print("Best: ", isl.population.champion.x)

        time.sleep(1)

This code will set up a single ZeroMQ island working on the 10-dimensional Schwefel problem and using the Differential Evolution algorithm. The population of the island will be 20. Lines 4-6 set up the problem, and lines 8-12 set up the island itself. 

In this tutorial we assume that the broker is at 127.0.0.1:6379, and we will be binding the receiving port only on the loopback inteface, but in a networked setup you would use IPs that are accessible beyond localhost.

The channel token is set to `schwefel10_de10_pop20`, which can be any string, but choosing a token relevant to the actual properties of the computation will help you determine which group of islands is working on what problem. If we start this program, it will connect to the broker and advertise itself as an island working on that token, but because there are no other peers it will simply perform the evolution locally. This is a typical output:

.. code-block:: bash

    root@f3428b4e74bd:/# python /tmp/zmq.py 
    DEBUG: IP: '127.0.0.1:2401'
    ('Best: ', (401.9594173543314, 424.7239031087063, -489.08965281305683, 192.79310987286283, 422.3702354040747, -280.2352091575768, -304.1105751377624, 419.61971508325234, -304.4306512922853, 412.3797020751874))
    ('Best: ', (401.9594173543314, 422.9252917377888, 397.6750493053389, -308.787292270248, 417.6016092014828, 415.24467267670747, -304.1105751377624, 419.61971508325234, 443.02530229342995, 412.3797020751874))
    ('Best: ', (417.7624473989758, 419.38998223162383, 423.9121066735651, 420.9581335823198, 423.1917112361371, 416.75217338872466, 416.5656801251844, 423.65078535816195, 427.8092589385355, 417.23729521493794))
    ('Best: ', (421.19930412300704, 420.80770338293433, 420.95461980350495, 421.1387381497945, 420.9882620455983, 420.7632718115494, 420.9945625003906, 420.68798717006837, 421.2449946368809, 420.9255606400046))
    ('Best: ', (420.97784637271286, 420.95030001558206, 420.97695438787514, 420.9925460783401, 420.9588231827722, 420.9747030586656, 420.96113438989653, 420.9744491052427, 420.9570307864317, 420.9708116286286))
    ('Best: ', (420.96796502949985, 420.9692843203323, 420.9674981715592, 420.96888513790157, 420.96902668827914, 420.96711830078385, 420.96698080790026, 420.9675721284126, 420.9690259384316, 420.9693847247998))

However, if we run two instances of this program simultaneously, they will connect to each other and start exchanging solutions.


.. code-block:: bash
    :linenos:

    root@f3428b4e74bd:/# python /tmp/zmq.py 
    DEBUG: IP: '127.0.0.1:2839'
    Best:  (446.330415191082, -318.57151650616345, -319.141745784881, 409.37490624414585, 434.9522671118881, 436.11092724710943, 412.9042329474612, -327.3902497012161, 433.12563296150233, 405.2335813101326)
    Best:  (406.4818160886365, 429.4589205156737, 411.6918195936836, 412.4947146394673, 439.92422758511657, 413.4096775345739, 402.7337709186839, 410.8803588738704, 458.24230339934326, 436.5535606636335)
    Best:  (416.6611528308124, 424.2092721283991, 418.8522866953207, 422.8026613418712, 423.3550577222186, 420.2964268628981, 422.0640382301092, 422.3657526856015, 422.8089197437483, 421.1248410730861)
    DEBUG: Opening connection to 127.0.0.1:2758
    Best:  (420.8118964319755, 420.97105998402435, 420.8675085594526, 421.0028607982087, 420.95935903890796, 420.991509807542, 420.84368415020265, 421.08197535480474, 420.81508001828564, 421.10958460178466)
    Best:  (421.07749509648613, 420.8546192606146, 420.7665760480669, 421.17780038893375, 421.0733383225067, 421.0745532974556, 421.1227771446935, 421.23088854902136, 420.9196459791927, 421.0675596920381)
    Best:  (421.02737839902096, 421.37184378009175, 421.25678912369284, 421.0148941900929, 421.1551021658338, 421.0769746858749, 421.14611943756057, 420.829339492172, 421.08317952008963, 420.76028074583166)
    Best:  (420.98011516631004, 420.7954519611739, 420.99948716750913, 420.83980802618726, 420.9522553458674, 421.28867861574423, 420.7846133663843, 421.114115625814, 421.0752711472328, 421.1199157748332)
    Best:  (420.8864797873097, 420.93967731273574, 420.80247869292685, 420.8796939441704, 421.04690058491394, 420.9704882856439, 420.9380577878827, 420.98689425859016, 420.9460027704123, 421.2146020009918)
    Best:  (420.6410077561692, 420.8774213590491, 420.9770237342764, 420.8169234318866, 421.0771442746173, 420.7741545848519, 421.2015181934143, 420.75764749753006, 421.08444174574305, 421.2578651544008)

And on the other side:

.. code-block:: bash
    :linenos:

    root@f3428b4e74bd:/# python /tmp/zmq.py 
    DEBUG: IP: '127.0.0.1:2758'
    DEBUG: Opening connection to 127.0.0.1:2839
    Best:  (170.02156365996962, 432.0808563954199, -299.9044328266113, 449.57827719040404, 414.32650241479433, 442.74256832933975, -497.56415018442954, 409.9770554543145, -128.49045206283606, 437.2655093302242)
    Best:  (420.8118964319755, 420.97105998402435, 420.8675085594526, 421.0028607982087, 420.95935903890796, 420.991509807542, 420.84368415020265, 421.08197535480474, 420.81508001828564, 421.10958460178466)
    Best:  (421.1237678412085, 420.9910361828901, 420.80333273611603, 421.0852572932901, 421.0638265999589, 420.97221532173234, 420.84697129401894, 421.1221559791297, 420.94034652647935, 421.01529447856126)
    Best:  (421.01592546566957, 421.2374973637021, 420.932682470239, 420.9163032282556, 421.02010123092407, 421.16968911726184, 421.09670372915707, 420.9404867930009, 420.94383616409635, 420.9957624510262)

Here we can see that the last best value from the first instance is 416.6611528308124 (line 5), and the second program produces a better candidate, 420.8118964319755 (line 5 on the second program), which is sent over the ZeroMQ sockets and appears on the output of the first program after it opens a connection to the new peer (lines 6 and 7).
